<?php
/**
 * Handles post metaboxes
 *
 * WARNING: This file is part of the core PrimaThemes framework.
 * DO NOT edit this file under any circumstances. 
 *
 * @category   PrimaThemes
 * @package    Framework
 * @subpackage Admin
 * @author     PrimaThemes
 * @link       http://www.primathemes.com
 */

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

/**
 * Create post metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
add_action( 'admin_menu', 'prima_metabox_post_create' );
function prima_metabox_post_create() {
	$post_types = get_post_types( array( 'show_ui' => true ), 'objects' );
	foreach ( $post_types as $type ) {
		$post_type_name = $type->labels->singular_name ? $type->labels->singular_name : $type->labels->name;
		if ( $type->name == 'page' )
			add_meta_box( "prima-metabox-page-template", sprintf( __( 'Page Template Settings', 'primathemes' ), $post_type_name ), 'prima_metabox_page_template', $type->name, 'normal', 'low' );
		if ( prima_metabox_post_content_args( $type->name ) )
			add_meta_box( "prima-metabox-post-content", __( 'Content Settings', 'primathemes' ), 'prima_metabox_post_content', $type->name, 'normal', 'low' );
		if ( prima_metabox_post_header_args( $type->name ) )
			add_meta_box( "prima-metabox-post-header", __( 'Header Settings', 'primathemes' ), 'prima_metabox_post_header', $type->name, 'normal', 'low' );
		if ( prima_metabox_post_footer_args( $type->name ) )
			add_meta_box( "prima-metabox-post-footer", __( 'Footer Settings', 'primathemes' ), 'prima_metabox_post_footer', $type->name, 'normal', 'low' );
		add_action( 'save_post', 'prima_metabox_post_save', 10, 2 );
	}
	add_action( "load-post.php", 'prima_metabox_post_script' );
	add_action( "load-post-new.php", 'prima_metabox_post_script' );
	add_action( "load-post.php", 'prima_metabox_post_style' );
	add_action( "load-post-new.php", 'prima_metabox_post_style' );
}

/**
 * Define page template metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_page_template_args( $type = '' ) {
	$meta = array();
	if ( empty( $type ) ) $type = 'page';
	return apply_filters( "prima_metabox_page_template_args", $meta, $type );
}

/**
 * Output page template metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_page_template( $object, $box ) {
	$meta = prima_metabox_page_template_args( $object->post_type );
	if ( !$meta ) return;
	echo '<input type="hidden" name="prima_metabox_'.$object->post_type.'_nonce" value="'.wp_create_nonce( basename( __FILE__ ) ).'" />';
	prima_metabox_generator( $meta, 'post', $object->ID );
}

/**
 * Define post content metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_content_args( $type = '' ) {
	$meta = array();
	if ( empty( $type ) ) $type = 'post';
	$meta = apply_filters( "prima_metabox_alltype_content_args", $meta, $type );
	return apply_filters( "prima_metabox_{$type}_content_args", $meta, $type );
}

/**
 * Output post content metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_content( $object, $box ) {
	$meta = prima_metabox_post_content_args( $object->post_type );
	if ( !$meta ) return;
	echo '<input type="hidden" name="prima_metabox_'.$object->post_type.'_nonce" value="'.wp_create_nonce( basename( __FILE__ ) ).'" />';
	prima_metabox_generator( $meta, 'post', $object->ID );
}

/**
 * Define post header metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_header_args( $type = '' ) {
	$meta = array();
	if ( empty( $type ) ) $type = 'post';
	$meta = apply_filters( "prima_metabox_alltype_header_args", $meta, $type );
	return apply_filters( "prima_metabox_{$type}_header_args", $meta, $type );
}

/**
 * Output post header metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_header( $object, $box ) {
	$meta = prima_metabox_post_header_args( $object->post_type );
	if ( !$meta ) return;
	echo '<input type="hidden" name="prima_metabox_'.$object->post_type.'_nonce" value="'.wp_create_nonce( basename( __FILE__ ) ).'" />';
	prima_metabox_generator( $meta, 'post', $object->ID );
}

/**
 * Define post footer metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_footer_args( $type = '' ) {
	$meta = array();
	if ( empty( $type ) ) $type = 'post';
	$meta = apply_filters( "prima_metabox_alltype_footer_args", $meta, $type );
	return apply_filters( "prima_metabox_{$type}_footer_args", $meta, $type );
}

/**
 * Output post footer metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_footer( $object, $box ) {
	$meta = prima_metabox_post_footer_args( $object->post_type );
	if ( !$meta ) return;
	echo '<input type="hidden" name="prima_metabox_'.$object->post_type.'_nonce" value="'.wp_create_nonce( basename( __FILE__ ) ).'" />';
	prima_metabox_generator( $meta, 'post', $object->ID );
}

/**
 * Save post metaboxes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_save( $post_id, $post ) {
	if ( !isset( $_POST["prima_metabox_{$post->post_type}_nonce"] ) || !wp_verify_nonce( $_POST["prima_metabox_{$post->post_type}_nonce"], basename( __FILE__ ) ) )
		return $post_id;
	$post_type = get_post_type_object( $post->post_type );
	if ( !current_user_can( $post_type->cap->edit_post, $post_id ) )
		return $post_id;
	$metadata = array();
	if ( $post->post_type == 'page' && prima_metabox_page_template_args( $post->post_type ) )
		$metadata = array_merge($metadata, prima_metabox_page_template_args( $post->post_type ));
	$metadata = array_merge($metadata, prima_metabox_post_content_args( $post->post_type ));
	$metadata = array_merge($metadata, prima_metabox_post_header_args( $post->post_type ));
	$metadata = array_merge($metadata, prima_metabox_post_footer_args( $post->post_type ));
	if ( $metadata ) {
		foreach ( $metadata as $meta ) {
			if ( isset( $_POST[ $meta['id'] ] ) && $_POST[ $meta['id'] ] ) {
				if ( $meta['type'] == 'textarea' || $meta['type'] == 'wysiwyg' ) {
					$new_meta_value = $_POST[ $meta['id'] ];
				}
				else {
					$new_meta_value = sanitize_text_field( $_POST[ $meta['id'] ] );
				}
				update_post_meta( $post_id, $meta['id'], $new_meta_value );
			}
			else {
				delete_post_meta( $post_id, $meta['id'] );
			}
		}
	}
}

/**
 * Post metaboxes enqueue script.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_script() {
	global $hook_suffix;
	if( function_exists('wp_enqueue_media') && did_action( 'wp_enqueue_media' ) )
		wp_enqueue_media();
	wp_enqueue_script('prima-metabox', PRIMA_ADMIN_URI . '/js/metabox.js', array('jquery'), '1.0', FALSE);
	$params = array(
		'useImage'   => __('Use this image', 'primathemes'),
		'removeImage'   => __('Remove image', 'primathemes'),
		'pageHook'      => $hook_suffix,
		'primaAdminUri' => PRIMA_ADMIN_URI
	);
	wp_localize_script('prima-metabox', 'prima', $params);
}

/**
 * Post metaboxes enqueue style.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_post_style() {
	wp_enqueue_style( 'prima-metabox', PRIMA_ADMIN_URI . '/css/metabox.css', false, 0.1, 'screen' );
}

/**
 * Metaboxes generator for both post and taxonomy.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_metabox_generator( $options, $type = 'post', $type_id, $type_name = '' ) {
    echo '<table class="form-table prima_meta_table">'."\n";
	$counter = 0;
    foreach ($options as $meta) {
		$counter++;
		$meta_id = $meta['id'];
		$meta_unique_id = "prima-" . $meta['id'];
		if ( $type == 'post') $meta_value = prima_get_post_meta( $meta_id, $type_id );
		elseif ( $type == 'taxonomy') $meta_value = prima_get_taxonomy_meta( $type_id, $type_name, $meta_id );
		if (empty($meta_value) && isset($meta['std'])) $meta_value = $meta['std'];
		$tr_class = array();
		$tr_class[] = 'prima_meta_id'.$meta['id'];
		if ( isset($meta['template']) && $meta['template'] ) { 
			$tr_class[] = 'meta_template';
			$tr_class[] = 'meta_template_'.$meta['template'];
		}
		if ( isset($meta['class']) && $meta['class'] ) 
			$tr_class[] = $meta['class'];
		if ( $counter == 1 )
			$tr_class[] = 'meta_first';
		$tr_class = implode(' ', $tr_class);
		// echo $meta_id.":".$meta_value.'</br>';
		if($meta['type'] == 'info'){
			echo "\t".'<tr class="'.$tr_class.'" style="background:#f8f8f8; font-size:11px; line-height:1.5em;">';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td>'.$meta['desc'].'</td>'."\n";
			echo "\t".'</tr>'."\n";  
		}
		elseif($meta['type'] == 'text'){
			$add_class = ''; $add_counter = '';
			if( isset($meta['counter']) && $meta['counter'] == true ){$add_class = 'prima-word-count'; $add_counter = '<span class="counter">0 characters, 0 words</span>';}
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td><input class="meta_input_text '.$add_class.'" type="'.$meta['type'].'" value="'.esc_attr( $meta_value ).'" name="'.$meta_id.'" id="'.$meta_unique_id.'"/>';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc">'.$meta['desc'] .' '. $add_counter .'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";  
						  
		}
		elseif($meta['type'] == 'text_small'){
			$add_class = ''; $add_counter = '';
			if( isset($meta['counter']) && $meta['counter'] == true ){$add_class = 'prima-word-count'; $add_counter = '<span class="counter">0 characters, 0 words</span>';}
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td><input size="8" class="'.$add_class.'" type="text" value="'.esc_attr( $meta_value ).'" name="'.$meta_id.'" id="'.$meta_unique_id.'"/>';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc_inline">'.$meta['desc'] .' '. $add_counter .'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";  
						  
		}
		elseif ($meta['type'] == 'textarea'){
			$add_class = ''; $add_counter = '';
			if( isset($meta['counter']) && $meta['counter'] == true ){$add_class = 'prima-word-count'; $add_counter = '<span class="counter">0 characters, 0 words</span>';}
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td><textarea class="meta_input_textarea '.$add_class.'" name="'.$meta_id.'" id="'.$meta_unique_id.'">' . esc_textarea( $meta_value ) . '</textarea>';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc">'.$meta['desc'] .' '. $add_counter.'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";  
		}
		elseif ($meta['type'] == 'wysiwyg'){
			$add_class = ''; $add_counter = '';
			if( isset($meta['counter']) && $meta['counter'] == true ){$add_class = 'prima-word-count'; $add_counter = '<span class="counter">0 characters, 0 words</span>';}
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td>';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc">'.$meta['desc'] .' '. $add_counter.'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";  
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<td colspan="2" class="wysiwygbox">';
			$args = array(
				'textarea_name' => $meta_id,
				'wpautop' => true,
				'textarea_rows'=> 10,
				'media_buttons' => true
			);
			wp_editor( $meta_value, $meta_unique_id, $args );
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";  
		}
		elseif ($meta['type'] == 'calendar'){
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td><input class="meta_input_calendar" type="text" name="'.$meta_id.'" id="'.$meta_unique_id.'" value="'.$meta_value.'">';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc">'.$meta['desc'].'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";  
		}
		elseif ($meta['type'] == 'time'){
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td><input class="meta_input_time" type="'.$meta['type'].'" value="'.$meta_value.'" name="'.$meta_id.'" id="'.$meta_unique_id.'"/>';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc">'.$meta['desc'].'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n"; 
		}
		elseif ($meta['type'] == 'select'){
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td><select class="meta_input_select" id="'.$meta_unique_id.'" name="'. $meta_id .'">';
			$array = $meta['options'];
			if($array){
				foreach ( $array as $id => $option ) {
					$selected = '';
					if(isset($meta['default']))  {                            
						if($meta['default'] == $id && empty($meta_value)){$selected = 'selected="selected"';} 
						else  {$selected = '';}
					}
					if($meta_value == $id){$selected = 'selected="selected"';}
					else  {$selected = '';}  
					echo '<option value="'. $id .'" '. $selected .'>' . $option .'</option>';
				}
			}
			echo '</select>';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc">'.$meta['desc'].'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";
		}
		elseif ($meta['type'] == 'checkbox'){
			if($meta_value == 'true') { $checked = ' checked="checked"';} else {$checked='';}
			$meta_class = ( isset( $meta['class'] ) && $meta['class'] ) ? ' class="'.$meta['class'].'" ' : '';
			echo "\t".'<tr class="'.$tr_class.'" >';
			if ( isset( $meta['onecol'] ) && $meta['onecol'] ) { 
				echo "\t\t".'<td colspan="2" '.$meta_class.'><input type="checkbox" '.$checked.' class="meta_input_checkbox" value="true"  id="'.$meta_unique_id.'" name="'. $meta_id .'" />';
			}
			else {
				echo "\t\t".'<th class="meta_names" '.$meta_class.'><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
				echo "\t\t".'<td '.$meta_class.'><input type="checkbox" '.$checked.' class="meta_input_checkbox" value="true"  id="'.$meta_unique_id.'" name="'. $meta_id .'" />';
			}
			echo '&nbsp; &nbsp; <span class="meta_desc" style="display:inline">'.$meta['desc'].'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";
		}
		elseif ($meta['type'] == 'radio'){
			$array = $meta['options'];
			if($array){
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td>';
			foreach ( $array as $id => $option ) {
				if($meta_value == $id) { $checked = ' checked';} else {$checked='';}
					echo '<input type="radio" '.$checked.' value="' . $id . '" class="meta_input_radio"  name="'. $meta_id .'" />';
					echo '<span class="meta_input_radio_desc" style="display:inline">'. $option .'</span><div class="meta_spacer"></div>';
				}
				echo "\t".'</tr>'."\n";    
			 }
		}
		elseif ($meta['type'] == 'images')
		{
			$i = 0;
			$select_value = '';
			$layout = '';
			foreach ($meta['options'] as $key => $option) 
			{ 
				$i++;
				$checked = '';
				$selected = '';
				if($meta_value != '') {
					if ($meta_value == $key) { $checked = ' checked'; $selected = 'meta-radio-img-selected'; }
				} 
				else {
					if ($option['std'] == $key) { $checked = ' checked'; } 
					elseif ($i == 1) { $checked = ' checked'; $selected = 'meta-radio-img-selected'; }
					else { $checked=''; }
				}
				$layout .= '<div class="meta-radio-img-label">';			
				$layout .= '<input type="radio" id="meta-radio-img-' . $meta_id . $i . '" class="checkbox meta-radio-img-radio" value="'.$key.'" name="'. $meta_id.'" '.$checked.' />';
				$layout .= '&nbsp;' . $key .'<div class="meta_spacer"></div></div>';
				$layout .= '<img src="'.$option.'" alt="" class="meta-radio-img-image '. $selected .'" onClick="document.getElementById(\'meta-radio-img-'. $meta['id'] . $i.'\').checked = true;" />';
			}
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td class="meta_fields">';
			echo $layout;
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo '<span class="meta_desc">'.$meta['desc'].'</span>';
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n"; 
		}
		elseif($meta['type'] == 'upload')
		{
			echo "\t".'<tr class="'.$tr_class.'" >';
			echo "\t\t".'<th class="meta_names"><label for="'.$meta['id'].'">'.$meta['name'].'</label></th>'."\n";
			echo "\t\t".'<td class="meta_fields">';
			$upload_id = rand(1000, 9999);
			$uploadclass = ( $meta_value ) ? 'has-file' : '';
			echo '<input type="text" name="'.$meta_id.'" id="'.$meta_unique_id.'" value="'.$meta_value.'" class="upload '.$uploadclass.'" />';
			echo '<input id="upload_'.$meta_unique_id.'" class="prima_upload_button button button_highlighted" type="button" value="' . __( 'Upload/Add image', 'primathemes' ) . '" rel="'.$upload_id.'" />';
			echo '<div class="screenshot" id="'.$meta_unique_id.'_image">';
			if ( $meta_value != '' ) 
			{ 
				$remove = '<a href="javascript:(void);" class="prima_remove_upload">'.__('Remove image', 'primathemes').'</a>';
				$image = preg_match( '/(^.*\.jpg|jpeg|png|gif|ico*)/i', $meta_value );
				if ( $image ) 
				{
					echo '<img src="'.$meta_value.'" alt="" />'.$remove.'';
				} 
				else 
				{
					$parts = explode( "/", $meta_value );
					for( $i = 0; $i < sizeof($parts); ++$i ) 
					{
						$title = $parts[$i];
					}
					echo '<div class="no_image"><a href="'.$meta_value.'">'.$title.'</a>'.$remove.'</div>';
				}
			}
			echo '</div>';
			if ( isset( $meta['desc'] ) && $meta['desc'] ) 
				echo "\t\t".'<span class="meta_desc" style="clear:both">'.$meta['desc'].'</span>'."\n";
			echo '</td>'."\n";
			echo "\t".'</tr>'."\n";
		}
		elseif($meta['type'] == 'postgallery')
		{
			if($type == 'post')
			{
				global $post;
				echo "\t".'<tr class="'.$tr_class.'" >';
				echo "\t\t".'<th class="meta_names"><label for="'.$meta_unique_id.'">'.$meta['name'].'</label></th>'."\n";
				echo "\t\t".'<td>';
				echo "\t\t".'<span class="meta_desc" style="clear:both">'.$meta['desc'].'</span>'."\n";
				$attachments = get_children( array( 'post_parent' => $post->ID, 'post_status' => 'inherit', 'post_type' => 'attachment', 'post_mime_type' => 'image', 'orderby' => 'menu_order', 'order' => 'ASC' ) );
				if ( !empty($attachments) ) {
					echo '<p>';
					foreach ( $attachments as $id => $attachment ) {
						list($src) = wp_get_attachment_image_src($id,'thumbnail');
						echo '<img src="'.$src.'" alt="" width="80" height="80" />';
					}
					echo '</p>';
				}
				echo '<p style="clear:both">';
				echo '<input id="upload_'.$meta_unique_id.'" class="upload_gallery_button button button_highlighted" type="button" value="' . __( 'Manage Images', 'primathemes' ) . '" rel="'.$post->ID.'" />';
				echo '<input type="submit" value="' . __( 'Save/Update', 'primathemes' ) . '" class="button" name="save"></p>';
				echo '</td>'."\n";
				echo "\t".'</tr>'."\n";  
			}
		}
	}
    echo '</table>'."\n\n";
}
