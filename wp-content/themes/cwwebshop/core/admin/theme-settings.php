<?php
/**
 * Handles Theme Settings page
 *
 * WARNING: This file is part of the core PrimaThemes framework.
 * DO NOT edit this file under any circumstances. 
 *
 * Credits (and Inspirations): 
 * - WooFramework
 * - OptionTree
 * - Options Framework
 * - Genesis Framework
 *
 * @category   PrimaThemes
 * @package    Framework
 * @subpackage Admin
 * @author     PrimaThemes
 * @link       http://www.primathemes.com
 */

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

/**
 * Add Theme Settings page.
 *
 * @since PrimaThemes 2.0
 */
add_action( 'admin_menu', 'prima_theme_settings_init' );
function prima_theme_settings_init() {
	global $_prima;
	$_prima->theme_settings = add_theme_page( __( 'Theme Settings', 'primathemes' ), __( 'Theme Settings', 'primathemes' ), apply_filters( "prima_settings_capability", 'edit_theme_options' ), 'primathemes', 'prima_theme_settings_page' );
	add_action( "load-{$_prima->theme_settings}", 'prima_theme_settings_script' );
	add_action( "load-{$_prima->theme_settings}", 'prima_theme_settings_style' );
}

/**
 * Register settings of Theme Settings.
 *
 * @since PrimaThemes 2.0
 */
add_action('admin_init', 'prima_theme_settings_register');
function prima_theme_settings_register() {
	register_setting( PRIMA_THEME_SETTINGS, PRIMA_THEME_SETTINGS, 'prima_theme_settings_save' );
	add_option( PRIMA_THEME_SETTINGS, prima_theme_settings_default(), '', 'yes' );
	if ( !isset($_REQUEST['page']) || $_REQUEST['page'] != 'primathemes' )
		return;
	if ( prima_get_setting('reset') ) {
		update_option( PRIMA_THEME_SETTINGS, prima_theme_settings_default() );
		wp_redirect( admin_url( 'themes.php?page=primathemes&reset=true' ) );
		exit;
	}
}

/**
 * Define Theme Settings options.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings() {
	$settings = array();
	return apply_filters( 'prima_theme_settings_args', $settings );
}

/**
 * Define Theme Settings default options.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_default() {
	$settings = prima_theme_settings();
	if ( false === $settings ) return false;
	$defaut_settings = array();
	foreach ($settings as $setting) {
		if (isset($setting['id'])) $defaut_settings[$setting['id']] = isset($setting['default']) ? $setting['default'] : '';
	}
	return $defaut_settings;
}

/**
 * Helper function for Theme Settings validation.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_save( $settings ) {
	return apply_filters( "prima_theme_settings_validate", $settings );
}

/**
 * Theme Settings admin page.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_page() {

	global $current_tab;
	
	$settings = prima_theme_settings();
	
	$tabs = prima_theme_settings_tabs( $settings );
	
	$current_tab = ( empty( $_GET['tab'] ) ) ? key($tabs) : sanitize_text_field( urldecode( $_GET['tab'] ) );
	
	?>
	<div class="wrap" id="prima-theme-settings">
		
		<?php screen_icon('themes'); ?>
		<h2 class="nav-tab-wrapper">
			<?php do_action( 'prima-theme-settings-nav-before' ); ?>
			
			<?php
				foreach ( $tabs as $name => $label ) {
					echo '<a href="#'.$name.'" rel="'.$name.'" class="nav-tab nav-tab-setting ';
					if( $current_tab == $name ) echo 'nav-tab-active';
					echo '">' . $label . '</a>';
				}
				echo '<a href="#settings" rel="settings" class="nav-tab nav-tab-setting">'.__( 'Settings', 'primathemes' ).'</a>';
			?>
			
			<?php do_action( 'prima-theme-settings-nav-after' ); ?>
			
			<?php 
			/*
				if ( current_theme_supports('prima-design-settings') )
					echo '<a href="'.admin_url('customize.php').'" class="nav-tab">'.__( 'Design Settings', 'primathemes' ).'</a>'."\n";
				if ( current_theme_supports('prima-sidebar-settings') )
					echo '<a href="'.admin_url('themes.php?page=primathemes-sidebars').'" class="nav-tab">'.__( 'Sidebar Settings', 'primathemes' ).'</a>'."\n";
			*/
			?>
		</h2>
		
        <?php
		if ( isset($_REQUEST['settings-updated']) && $_REQUEST['settings-updated'] == 'true') {  
			echo '<br /><div id="message" class="updated fade"><p><strong>'.__('Theme Settings Saved', 'primathemes').'</strong></p></div>';
		}
		elseif ( isset( $_REQUEST['reset'] ) && $_REQUEST['reset'] == 'true' ) {
			echo '<br /><div id="message" class="error fade"><p><strong>'.__('Theme Settings Reset', 'primathemes').'</strong></p></div>';
		}
		?>
		
		<?php do_action( 'prima-theme-settings-form-before' ); ?>
		
        <form method="post" enctype="multipart/form-data" action="options.php">
		
			<?php settings_fields( PRIMA_THEME_SETTINGS ); ?>
			
			<?php
			if ( !empty ( $tabs ) ) {
				$tabs['settings'] = __( 'Settings', 'primathemes' );
				foreach ( $tabs as $tab_id => $tab_name ) {
					$sections = prima_theme_settings_sections( $settings, $tab_id );
					if ( !empty ( $sections ) ) {
					foreach ( $sections as $section_id => $section_name ) {
						$box = array(
							'tab_id' => $tab_id,
							'tab_name' => $tab_name,
							'section_id' => $section_id,
							'section_name' => $section_name,
						);
						prima_theme_settings_generator( $settings, $box );
					}
					}
				}
			}
			?>
		
			<p class="submit prima-settings-submit">
				<input type="submit" class="button-primary" value="<?php _e( 'Save Settings', 'primathemes' ); ?>" />
				<input type="submit" name="<?php echo PRIMA_THEME_SETTINGS; ?>[reset]"  class="button-secondary button-reset" value="<?php _e( 'Reset Settings', 'primathemes' ); ?>" />
			</p>
		
		</form>
		
		<?php do_action( 'prima-theme-settings-form-after' ); ?>
		
	</div><!-- .wrap -->
	<?php
	// DEBUG
    // $settings = get_option( PRIMA_THEME_SETTINGS ); print_r($settings); 
    // echo '<br/><br/>';print_r(prima_theme_settings_default()); 
    // echo '<br/><br/>';print_r(prima_theme_settings()); 
}

/**
 * Define Theme Settings tabs.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_tabs( $options ) {
	$tabs = array();
	foreach ( $options as $key => $value ) {
		if ( $value['type'] == 'tab' ) {
			$tabs[$value['id']] = $value['name'];
		} 
	}
	if  ( empty( $tabs ) ) 
		$tabs['general'] = __( 'General', 'primathemes' );
	return $tabs;
}

/**
 * Define Theme Settings tabs.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_sections( $options, $tab ) {
	$sections = array();
	foreach ( $options as $key => $value ) {
		if ( $value['type'] == 'section' && $value['tab'] == $tab ) {
			$sections[$value['id']] = $value['name'];
		} 
	}
	return $sections;
}

/**
 * Generate Theme Settings options.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_generator( $settings, $box, $setting_field = PRIMA_THEME_SETTINGS ) {

	extract( $box );
	
	echo '<div class="prima-settings-section prima-settings-tab-'.$tab_id.'">';
	echo '<br/><table class="widefat" cellspacing="0">';
	echo '<thead><tr><th colspan="2">'.$section_name.'</th></tr></thead>';
	echo '<tbody>';
	
	$counter = 0;
	foreach ( $settings as $setting ) {
		
		$counter++;
	
		$id = '';
		$name = '';
		$desc = '';
		$section = '';
		
		extract( $setting );
		
		if ( $type != 'tab' && $type != 'section' && $section == $section_id ) {
			echo '<tr valign="top">';
			echo '<td scope="row" width="25%"><p>'.$name.'</p></td>';
			echo '<td>';
			echo '<fieldset><p>';
			
			if ( $type != 'info' )
				$value = prima_get_setting( $id, $setting_field );
			
			switch ( $type ) {
				
				case 'text':
					$value = esc_attr( $value );
					echo '<input name="'.$setting_field.'['.$id.']" id="'.$setting_field.'-'.$id.'" class="regular-text" type="text" value="'. $value .'" />';
				break;
				
				case 'textarea':
					$value = esc_textarea( $value );
					echo '<textarea name="'.$setting_field.'['.$id.']" id="'.$setting_field.'-'.$id.'" cols="50" rows="5">'.$value.'</textarea>';
				break;
				
				case 'wysiwyg':
					$args = array(
						'textarea_name' => $setting_field.'['.$id.']',
						'wpautop' => true,
						'textarea_rows'=> 10,
						'media_buttons' => true
					);
					wp_editor( $value, $setting_field.'-'.$id, $args );
				break;
			
				case 'select':
					echo '<select name="'.$setting_field.'['.$id.']" id="'.$setting_field.'-'.$id.'">';
					foreach ( $options as $option_key => $option_name ) {
						$selected = '';
						if ( $value ) {
							if ( $value == $option_key ) 
								$selected = ' selected="selected"';
						}
						else {
							if ( $default == $option_key ) 
								$selected = ' selected="selected"';
						}
						echo '<option'. $selected .' value="'.$option_key.'">';
						echo $option_name;
						echo '</option>';
					} 
					echo '</select>';
				break;
				
				case "radio":
					foreach ( $options as $option_key => $option_name ) {
						$checked = '';
						if ( $value ) {
							if ( $value == $option_key ) 
								$checked = ' checked';
						}
						else {
							if ( $default == $option_key ) 
								$checked = ' checked';
						}
						echo '<input type="radio" name="'.$setting_field.'['.$id.']" value="'. $option_key .'" '. $checked .' />' . $option_name .'<br />';
					}
				break;
				
				case "checkbox": 
					$checked = '';
					if( $value == 'true') { $checked = 'checked="checked"'; }
					echo '<input type="checkbox" class="checkbox" name="'.$setting_field.'['.$id.']" id="'.$setting_field.'-'.$id.'" value="true" '. $checked .' /> &nbsp; &nbsp;';
				break;
				
				case "images":
					$i = 0;
					foreach ( $options as $option_key => $option_name ) {
						$i++;
						$checked = '';
						$selected = '';
						if( $value != '' ) {
							if ( $value == $option_key ) { $checked = ' checked'; $selected = 'prima-radio-img-selected'; } 
						}
						else {
							if ( $default == $option_key ) { $checked = ' checked'; $selected = 'prima-radio-img-selected'; }
							elseif ( $i == 1  && !isset( $value ) ) { $checked = ' checked'; $selected = 'prima-radio-img-selected'; }
							elseif ( $i == 1  && $default == '' ) { $checked = ' checked'; $selected = 'prima-radio-img-selected'; }
							else { $checked = ''; }
						}	
						echo '<span>';
						echo '<input type="radio" id="prima-radio-img-' . $id . $i . '" class="checkbox prima-radio-img-radio" value="'.$option_key.'" name="'.$setting_field.'['.$id.']" '.$checked.' />';
						echo '<div class="prima-radio-img-label">'. $option_key .'</div>';
						echo '<img src="'.$option_name.'" alt="'.$option_key.'" class="prima-radio-img-image '. $selected .'" onClick="document.getElementById(\'prima-radio-img-'. $id . $i.'\').checked = true;" />';
						echo '</span>';
					}
				break; 
			
				case "upload":
					$formid = $setting_field.'-'.$id;
					$upload_id = rand(1000, 9999);
					$uploadclass = ( $value ) ? 'has-file' : '';
					echo '<input type="text" name="'.$setting_field.'['.$id.']" id="'.$setting_field.'-'.$id.'" value="'.$value.'" class="regular-text upload '.$uploadclass.'" />';
					echo '<input id="upload_'.$setting_field.'-'.$id.'" class="prima_upload_button button-secondary" type="button" value="'.__("Upload/Add image", 'primathemes').'" rel="'.$upload_id.'" />';
					echo '<div class="prima_upload_screenshot" id="'.$setting_field.'-'.$id.'_image">';
					if ( $value != '' ) { 
						$remove = '<a href="#" class="prima_upload_remove">'.__('Remove image', 'primathemes').'</a>';
						$image = preg_match( '/(^.*\.jpg|jpeg|png|gif|ico*)/i', $value );
						if ( $image ) {
							echo '<img src="'.$value.'" alt="" height="100" />'.$remove.'';
						} 
					}
					echo '</div>';
				break;
			} 

			if ( $type != 'checkbox' && $type != 'info' )
				echo '<br/>';
			if ( isset( $desc ) && $desc )
				echo '<span class="description">'.$desc.'</span>';
			echo '</p></fieldset>';
			echo '</td>';
			echo '</tr>';
		}
		
	}
	
	echo '</tbody>';
	echo '</table>';
	echo '</div>';
	
}

/**
 * Enqueue script for Theme Settings page.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_script() {
	global $_prima;
	wp_enqueue_media();
	wp_enqueue_script('prima-admin', PRIMA_ADMIN_URI . '/js/admin.js', array( 'jquery' ), '2.0', FALSE);
	$params = array(
		'pageHook'      => $_prima->theme_settings,
		'primaAdminUri' => PRIMA_ADMIN_URI,
		'useImage'   => __('Use this image', 'primathemes'),
		'removeImage'   => __('Remove image', 'primathemes'),
		'warnUnsaved'   => __('The changes you made will be lost if you navigate away from this page.', 'primathemes'),
		'warnReset'     => __('Are you sure you want to reset theme settings?', 'primathemes')
	);
	wp_localize_script('prima-admin', 'prima', $params);
}

/**
 * Enqueue style for Theme Settings page.
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_style() {
	wp_enqueue_style( 'prima-admin', PRIMA_ADMIN_URI . '/css/admin.css', false, '2.0', 'screen' );
}

/**
 * Define export settings fields database
 *
 * @since PrimaThemes 2.0
 */
function prima_theme_settings_export_fields() {
	$settings = array();
	$settings["theme-settings"] = array( "name" => __('Theme Settings', 'primathemes'),
						"id" => "theme-settings",
						"table" => PRIMA_THEME_SETTINGS);
	if ( current_theme_supports('prima-design-settings') )
		$settings["design-settings"] = array( "name" => __('Design Settings', 'primathemes'),
							"id" => "design-settings",
							"table" => PRIMA_DESIGN_SETTINGS);
	if ( current_theme_supports('prima-sidebar-settings') )
		$settings["sidebar-settings"] = array( "name" => __('Sidebar Settings', 'primathemes'),
							"id" => "sidebar-settings",
							"table" => PRIMA_SIDEBAR_SETTINGS);
	return apply_filters( 'prima_theme_settings_export_fields_args', $settings );
}

/**
 * Export theme settings file
 *
 * @since PrimaThemes 2.0
 */
add_action( 'admin_init', 'prima_theme_settings_export' );
function prima_theme_settings_export() {
	if ( !isset($_REQUEST['page']) || $_REQUEST['page'] != 'primathemes' )
		return;
	if ( empty( $_REQUEST['primathemes-export'] ) )
		return;
	check_admin_referer('primathemes-export');
	$theme_data = wp_get_theme( get_stylesheet() );
	$export_settings = prima_theme_settings_export_fields();
	$settings = array();
	if ( $_REQUEST['primathemes-export'] === 'all' ) {
		foreach ($export_settings as $export_setting) {
			$settings[$export_setting['table']] = get_option( $export_setting['table'] );
		}
		$prefix = str_replace(' ', '', ucwords($theme_data->get( 'Name' ))).'-all-settings';
	}
	else {
		$settings = array(
			$export_settings[$_REQUEST['primathemes-export']]['table'] => get_option( $export_settings[$_REQUEST['primathemes-export']]['table'] )
		);
		$prefix = str_replace(' ', '', ucwords($theme_data->get( 'Name' ))).'-'.$export_settings[$_REQUEST['primathemes-export']]['id'];
	}
	if ( !$settings ) return;
    $output = json_encode( (array)$settings );
    header( 'Content-Description: File Transfer' );
    header( 'Cache-Control: public, must-revalidate' );
    header( 'Pragma: hack' );
    header( 'Content-Type: text/plain' );
    header( 'Content-Disposition: attachment; filename="' . $prefix . '-' . date("Ymd-His") . '.json"' );
    header( 'Content-Length: ' . strlen($output) );
    echo $output;
    exit;
}

/**
 * Import theme settings file
 *
 * @since PrimaThemes 2.0
 */
add_action( 'admin_init', 'prima_theme_settings_import' );
function prima_theme_settings_import() {
	if ( !isset($_REQUEST['page']) || $_REQUEST['page'] != 'primathemes' )
		return;
	if ( empty( $_REQUEST['primathemes-import'] ) )
		return;
	check_admin_referer('primathemes-import');
	$overrides = array( 'test_form' => false, 'test_type' => false );
	WP_Filesystem();
	global $wp_filesystem;
	$upload = $wp_filesystem->get_contents( $_FILES['primathemes-import-upload']['tmp_name'] );
	$options = json_decode( $upload, true );
	if ( !$options ) {
		wp_redirect( admin_url( 'themes.php?page=primathemes&settings-error=true' ) );
		exit;
	}
	foreach ( (array)$options as $key => $settings ) {
		update_option( $key, $settings );
	}
	wp_redirect( admin_url( 'themes.php?page=primathemes&settings-imported=true' ) );
	exit;
}

/**
 * Import / Export Settings Message
 *
 * @since PrimaThemes 2.0
 */
add_action( 'prima-theme-settings-form-before', 'prima_theme_settings_importexport_message' );
function prima_theme_settings_importexport_message() {
	if ( isset($_REQUEST['settings-imported']) && $_REQUEST['settings-imported'] == 'true') {  
		echo '<br /><div id="message" class="updated fade"><p><strong>'.__('Settings successfully imported!', 'primathemes').'</strong></p></div>';
		if ( current_theme_supports('prima-design-settings') && function_exists('prima_design_settings_generate_output') ) {
			update_option( PRIMA_DESIGN_SETTINGS.'_output_expire', 'yes' );
			prima_design_settings_generate_output();
		}
	}
	elseif ( isset( $_REQUEST['settings-error'] ) && $_REQUEST['settings-error'] == 'true' ) {
		echo '<br /><div id="message" class="error fade"><p><strong>'.__('There was a problem importing your settings. Please Try again.', 'primathemes').'</strong></p></div>';
	}
}

/**
 * Export Settings Tab
 *
 * @since PrimaThemes 2.0
 */
add_action( 'prima-theme-settings-form-after', 'prima_theme_settings_form_export' );
function prima_theme_settings_form_export() {
	?>
	<div class="prima-settings-section prima-settings-tab-settings">
	
		<br/>
		<table class="widefat" cellspacing="0">
		<thead><tr><th><?php _e('Export Settings File', 'primathemes'); ?></th></tr></thead>
		<tbody>
		<tr><td>
			<p><?php _e('When you click the button below, PrimaThemes will generate a JSON file for you to save to your computer.', 'primathemes'); ?></p>
			<p><?php _e('Once you have saved the download file, you can use the import function on another site to import this data.', 'primathemes'); ?></p>
			<p>
				<form method="post" action="<?php echo admin_url('admin.php?page=primathemes'); ?>">
					<?php wp_nonce_field('primathemes-export'); ?>
					<select name="primathemes-export">
						<option value="all"><?php _e('All Settings', 'primathemes'); ?></option>
						<?php 
						foreach ( prima_theme_settings_export_fields() as $setting ) {
							echo '<option value="'.$setting['id'].'">'.$setting['name'].'</option>';
						}
						?>
					</select>
					<input type="submit" class="button button-primary" value="<?php _e('Download Settings File', 'primathemes'); ?>" />
				</form>
			</p>
		</td></tr>
		</tbody>
		</table>
		
	</div>
	<?php
}

/**
 * Import Settings Tab
 *
 * @since PrimaThemes 2.0
 */
add_action( 'prima-theme-settings-form-after', 'prima_theme_settings_form_import' );
function prima_theme_settings_form_import() {
	?>
	<div class="prima-settings-section prima-settings-tab-settings">
		
		<br/>
		<table class="widefat" cellspacing="0">
		<thead><tr><th><?php _e('Import Settings File', 'primathemes'); ?></th></tr></thead>
		<tbody>
		<tr><td>
			<p><?php _e('Upload the data file from your computer (.json) and we\'ll import your settings.', 'primathemes'); ?></p>
			<p><?php _e('Choose the file from your computer and click "Upload and Import"', 'primathemes'); ?></p>
			<p>
				<form enctype="multipart/form-data" method="post" action="<?php echo admin_url('themes.php?page=primathemes'); ?>">
					<?php wp_nonce_field('primathemes-import'); ?>
					<input type="hidden" name="primathemes-import" value="1" />
					<label for="primathemes-import-upload"><?php sprintf( __('Upload File: (Maximum Size: %s)', 'primathemes'), ini_get('post_max_size') ); ?></label>
					<input type="file" id="primathemes-import-upload" name="primathemes-import-upload" size="25" />
					<input type="submit" class="button button-primary" value="<?php _e('Upload file and import', 'primathemes'); ?>" />
				</form>
			</p>
		</td></tr>
		</tbody>
		</table>
		
	</div>
	<?php
}
