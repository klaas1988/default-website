<?php
/**
 * Functions to handle theme related shortcodes
 *
 * WARNING: This file is part of the core PrimaThemes framework.
 * DO NOT edit this file under any circumstances. 
 *
 * Credits (and Inspirations):
 * - Hybrid Core by ThemeHybrid http://themehybrid.com
 * - Genesis Framework by StudioPress http://studiopress.com
 *
 * @category   PrimaThemes
 * @package    Framework
 * @subpackage Shortcodes
 * @author     PrimaThemes
 * @link       http://www.primathemes.com
 */

if ( ! defined( 'ABSPATH' ) ) exit; // Exit if accessed directly

/**
 * Register theme related shortcodes.
 *
 * @since PrimaThemes 2.0
 */ 
add_shortcode( 'post-title', 'prima_theme_shortcode' );
add_shortcode( 'post-content', 'prima_theme_shortcode' );
add_shortcode( 'post-excerpt', 'prima_theme_shortcode' );
add_shortcode( 'post-image', 'prima_theme_shortcode' );
add_shortcode( 'post-author', 'prima_theme_shortcode' );
add_shortcode( 'post-terms', 'prima_theme_shortcode' );
add_shortcode( 'post-comments-link', 'prima_theme_shortcode' );
add_shortcode( 'post-date', 'prima_theme_shortcode' );
add_shortcode( 'post-edit-link', 'prima_theme_shortcode' );
add_shortcode( 'post-shortlink', 'prima_theme_shortcode' );
add_shortcode( 'bloginfo', 'prima_theme_shortcode' );
add_shortcode( 'site-link', 'prima_theme_shortcode' );
add_shortcode( 'wp-link', 'prima_theme_shortcode' );
add_shortcode( 'theme-link', 'prima_theme_shortcode' );
add_shortcode( 'child-link', 'prima_theme_shortcode' );
add_shortcode( 'loginout-link', 'prima_theme_shortcode' );
add_shortcode( 'query-counter', 'prima_theme_shortcode' );
add_shortcode( 'nav-menu', 'prima_theme_shortcode' );
add_shortcode( 'dropdown-categories', 'prima_theme_shortcode' );
add_shortcode( 'list-categories', 'prima_theme_shortcode' );
add_shortcode( 'tag-cloud', 'prima_theme_shortcode' );
add_shortcode( 'list-authors', 'prima_theme_shortcode' );
add_shortcode( 'list-bookmarks', 'prima_theme_shortcode' );
add_shortcode( 'dropdown-pages', 'prima_theme_shortcode' );
add_shortcode( 'list-pages', 'prima_theme_shortcode' );

/**
 * Define theme related shortcodes.
 *
 * @since PrimaThemes 2.0
 */ 
function prima_theme_shortcode($attr, $content=null, $code=""){
	switch( $code ){
	
		/* Post Title (inside loop) */
		case 'post-title':
			$attr = shortcode_atts( array( 'container' => 'h4', 'class' => '', 'link' => '1' ), $attr );
			$title = get_the_title();
			$link = get_permalink();
			if ( $attr['link'] )
				$title = '<a href="'.$link.'" title="'.the_title_attribute('echo=0').'" rel="bookmark">'.$title.'</a>';
			if ( $attr['container'] )
				$title = '<'.$attr['container'].' class="'.$attr['class'].'">'.$title.'</'.$attr['container'].'>';
			return $title;
		break;
		
		/* Post Content (inside loop) */
		case 'post-content':
			global $more; $more = 0; 
			$attr = shortcode_atts( array( 'more' => '' ), $attr );
			return get_the_content( $attr['more'] );
		break;
		
		/* Post Excerpt (inside loop) */
		case 'post-excerpt':
			$attr = shortcode_atts( array( 'more' => '', 'limit' => '' ), $attr );
			$the_excerpt = get_the_excerpt();
			$the_excerpt = str_replace( '[...]', '', $the_excerpt );
			if ( $attr['limit'] ) {
				$the_excerpt = substr( $the_excerpt, 0, $attr['limit'] );
				$the_excerpt = substr( $the_excerpt, 0, strrpos( $the_excerpt, ' '));
			}
			$the_excerpt .= '&hellip;';
			if ( $attr['more'] )
				$the_excerpt .= ' <a class="more-link" href="'.get_permalink().'">'.$attr['more'].'</a>';
			return $the_excerpt;
		break;
		
		/* Post Image (inside loop) */
		case 'post-image':
			global $post;
			$attr = shortcode_atts( array( 
				'post_id' => $post->ID,
				'meta_key' => false,
				'the_post_thumbnail' => true, // WP 2.9+ image function
				'attachment' => true,
				'image_scan' => true,
				'default_image' => false,
				'size' => '',
				'width' => '48',
				'height' => '48',
				'quality' => 80,
				'link_to_post' => true,
				'alignment' => 'left',
				'image_class' => false,
				'cache' => true
			), $attr );
			return prima_get_image( $attr );
		break;
		
		/* Post Author (inside loop) */
		case 'post-author':
			$attr = shortcode_atts( array( 'before' => '', 'after' => '' ), $attr );
			$author = '<span class="author vcard"><a class="url fn n" href="' . get_author_posts_url( get_the_author_meta( 'ID' ) ) . '" title="' . get_the_author_meta( 'display_name' ) . '">' . get_the_author_meta( 'display_name' ) . '</a></span>';
			return $attr['before'] . $author . $attr['after'];
		break;
		
		/* Post Taxonomy (inside loop) */
		case 'post-terms':
			global $post;
			$attr = shortcode_atts( array( 'id' => $post->ID, 'taxonomy' => 'post_tag', 'separator' => ', ', 'before' => '', 'after' => '' ), $attr );
			$attr['before'] = '<span class="' . $attr['taxonomy'] . '">' . $attr['before'];
			$attr['after'] .= '</span>';
			return get_the_term_list( $attr['id'], $attr['taxonomy'], $attr['before'], $attr['separator'], $attr['after'] );
		break;
		
		/* Post Comments Link (inside loop) */
		case 'post-comments-link':
			$comments_link = '';
			$number = get_comments_number();
			$attr = shortcode_atts( array( 'zero' => __( 'Leave a response', 'primathemes' ), 'one' => __( '1 Response', 'primathemes' ), 'more' => __( '%1$s Responses', 'primathemes' ), 'css_class' => 'comments-link', 'none' => '', 'before' => '', 'after' => '' ), $attr );
			if ( 0 == $number && !comments_open() && !pings_open() ) {
				if ( $attr['none'] )
					$comments_link = '<span class="' . esc_attr( $attr['css_class'] ) . '">' . $attr['none'] . '</span>';
			}
			elseif ( $number == 0 )
				$comments_link = '<a class="' . esc_attr( $attr['css_class'] ) . '" href="' . get_permalink() . '#respond" title="' . sprintf( __( 'Comment on %1$s', 'primathemes' ), the_title_attribute( 'echo=0' ) ) . '">' . $attr['zero'] . '</a>';
			elseif ( $number == 1 )
				$comments_link = '<a class="' . esc_attr( $attr['css_class'] ) . '" href="' . get_comments_link() . '" title="' . sprintf( __( 'Comment on %1$s', 'primathemes' ), the_title_attribute( 'echo=0' ) ) . '">' . $attr['one'] . '</a>';
			elseif ( $number > 1 )
				$comments_link = '<a class="' . esc_attr( $attr['css_class'] ) . '" href="' . get_comments_link() . '" title="' . sprintf( __( 'Comment on %1$s', 'primathemes' ), the_title_attribute( 'echo=0' ) ) . '">' . sprintf( $attr['more'], $number ) . '</a>';
			if ( $comments_link )
				$comments_link = $attr['before'] . $comments_link . $attr['after'];
			return $comments_link;
		break;
		
		/* Post Date (inside loop) */
		case 'post-date':
			$attr = shortcode_atts( array( 'before' => '', 'after' => '', 'format' => get_option( 'date_format' ) ), $attr );
			$published = '<abbr class="published" title="' . sprintf( get_the_time( __( 'l, F jS, Y, g:i a', 'primathemes' ) ) ) . '">' . sprintf( get_the_time( $attr['format'] ) ) . '</abbr>';
			return $attr['before'] . $published . $attr['after'];
		break;
		
		/* Post Edit Link (inside loop) */
		case 'post-edit-link':
			global $post;
			$post_type = get_post_type_object( $post->post_type );
			if ( !current_user_can( "edit_{$post_type->capability_type}", $post->ID ) )
				return '';
			$attr = shortcode_atts( array( 'before' => '', 'after' => '' ), $attr );
			return $attr['before'] . '<span class="edit"><a class="post-edit-link" href="' . get_edit_post_link( $post->ID ) . '" title="' . sprintf( __( 'Edit %1$s', 'primathemes' ), $post->post_type ) . '">' . __( 'Edit', 'primathemes' ) . '</a></span>' . $attr['after'];
		break;
		
		/* Post Shortlink (inside loop) */
		case 'post-shortlink':
			global $post;
			$attr = shortcode_atts(
				array(
					'text' => __( 'Shortlink', 'primathemes' ),
					'title' => the_title_attribute( array( 'echo' => false ) ),
					'before' => '',
					'after' => ''
				),
				$attr
			);
			$shortlink = wp_get_shortlink( $post->ID );
			return "{$attr['before']}<a class='shortlink' href='{$shortlink}' title='{$attr['title']}' rel='shortlink'>{$attr['text']}</a>{$attr['after']}";
		break;
		
		/* Blog Info */
		case 'bloginfo':
			$attr = shortcode_atts( array( 'show' => '' ), $attr );
			return get_bloginfo( $attr['show'] );
		break;
		
		/* Site Link */
		case 'site-link':
			return '<a class="site-link" href="' . home_url() . '" title="' . get_bloginfo( 'name' ) . '" rel="home"><span>' . get_bloginfo( 'name' ) . '</span></a>';
		break;
		
		/* Wordpress Link */
		case 'wp-link':
			return '<a class="wp-link" href="http://wordpress.org" title="' . __( 'Powered by WordPress, state-of-the-art semantic personal publishing platform', 'primathemes' ) . '"><span>' . __( 'WordPress', 'primathemes' ) . '</span></a>';
		break;
		
		/* Parent Theme Link */
		case 'theme-link':
			$data = wp_get_theme( get_template() );
			return '<a class="theme-link" href="' . esc_url( $data->get( 'ThemeURI' ) ) . '" title="' . esc_attr( $data->get( 'Name' ) ) . '"><span>' . esc_attr( $data->get( 'Name' ) ) . '</span></a>';
		break;
		
		/* Child Theme Link */
		case 'child-link':
			$data = wp_get_theme( get_stylesheet() );
			return '<a class="child-link" href="' . esc_url( $data->get( 'ThemeURI' ) ) . '" title="' . esc_attr( $data->get( 'Name' ) ) . '"><span>' . esc_attr( $data->get( 'Name' ) ) . '</span></a>';
		break;
		
		/* Login Logout Link */
		case 'loginout-link':
			if ( is_user_logged_in() )
				$out = '<a class="logout-link" href="' . wp_logout_url( esc_url( $_SERVER['HTTP_REFERER'] ) ) . '" title="' . __( 'Log out of this account', 'primathemes' ) . '">' . __( 'Log out', 'primathemes' ) . '</a>';
			else
				$out = '<a class="login-link" href="' . wp_login_url( esc_url( $_SERVER['HTTP_REFERER'] ) ) . '" title="' . __( 'Log into this account', 'primathemes' ) . '">' . __( 'Log in', 'primathemes' ) . '</a>';
			return $out;
		break;
		
		/* Query Counter */
		case 'query-counter':
			if ( !current_user_can( 'edit_themes' ) ) return false;
			$out = sprintf( __( 'This page loaded in %1$s seconds with %2$s database queries.', 'primathemes' ), timer_stop( 0, 3 ), get_num_queries() );
			return $out;
		break;
		
		/* Navigation Menu */
		case 'nav-menu':
			$attr = shortcode_atts(
				array(
					'menu' => '',
					'container' => 'div',
					'container_id' => '',
					'container_class' => 'nav-menu',
					'menu_id' => '',
					'menu_class' => '',
					'link_before' => '',
					'link_after' => '',
					'before' => '',
					'after' => '',
					'fallback_cb' => 'wp_page_menu',
					'walker' => ''
				),
				$attr
			);
			$attr['echo'] = false;
			return wp_nav_menu( $attr );
		break;
		
		/* Dropdown Categories */
		case 'dropdown-categories':
			$attr = shortcode_atts(
				array(
					'show_option_all' => '', 'show_option_none' => '',
					'orderby' => 'id', 'order' => 'ASC',
					'show_last_update' => 0, 'show_count' => 0,
					'hide_empty' => 1, 'child_of' => 0,
					'exclude' => '', 
					'selected' => 0, 'hierarchical' => 0,
					'name' => 'cat', 'id' => '',
					'class' => 'postform', 'depth' => 0,
					'tab_index' => 0, 'taxonomy' => 'category',
					'hide_if_empty' => false
				),
				$attr
			);
			$attr['echo'] = false;
			return wp_dropdown_categories( $attr );
		break;
		
		/* List Categories */
		case 'list-categories':
			$attr = shortcode_atts(
				array(
					'show_option_all' => '', 'show_option_none' => __('No categories', 'primathemes'),
					'orderby' => 'name', 'order' => 'ASC',
					'show_last_update' => 0, 'style' => 'list',
					'show_count' => 0, 'hide_empty' => 1,
					'use_desc_for_title' => 1, 'child_of' => 0,
					'feed' => '', 'feed_type' => '',
					'feed_image' => '', 'exclude' => '',
					'exclude_tree' => '', 'current_category' => 0,
					'hierarchical' => true, 'title_li' => '',
					'depth' => 0, 'taxonomy' => 'category'
				),
				$attr
			);
			$attr['echo'] = false;
			return wp_list_categories( $attr );
		break;
		
		/* Tag Cloud */
		case 'tag-cloud':
			$attr = shortcode_atts(
				array(
					'smallest' => 8, 'largest' => 22, 'unit' => 'pt', 'number' => 45,
					'format' => 'flat', 'separator' => "\n", 'orderby' => 'name', 'order' => 'ASC',
					'exclude' => '', 'include' => '', 'link' => 'view', 'taxonomy' => 'post_tag'
				),
				$attr
			);
			$attr['echo'] = false;
			return wp_tag_cloud( $attr );
		break;
		
		/* List Author */
		case 'list-authors':
			$attr = shortcode_atts(
				array(
					'optioncount' => false, 'exclude_admin' => true,
					'show_fullname' => false, 'hide_empty' => true,
					'feed' => '', 'feed_image' => '', 'feed_type' => '',
					'style' => 'list', 'html' => true
				),
				$attr
			);
			$attr['echo'] = false;
			return wp_list_authors( $attr );
		break;
		
		/* List Bookmarks */
		case 'list-bookmarks':
			$attr = shortcode_atts(
				array(
					'orderby' => 'name', 'order' => 'ASC',
					'limit' => -1, 'category' => '', 'exclude_category' => '',
					'category_name' => '', 'hide_invisible' => 1,
					'show_updated' => 0,
					'categorize' => 1, 'title_li' => '',
					'title_before' => '<h2>', 'title_after' => '</h2>',
					'category_orderby' => 'name', 'category_order' => 'ASC',
					'class' => 'linkcat', 'category_before' => '<li id="%id" class="%class">',
					'category_after' => '</li>'
				),
				$attr
			);
			$attr['echo'] = false;
			return wp_list_bookmarks( $attr );
		break;
		
		/* Dropdown Pages */
		case 'dropdown-pages':
			$attr = shortcode_atts(
				array(
					'depth' => 0, 'child_of' => 0,
					'selected' => 0,
					'name' => 'page_id', 'id' => '',
					'show_option_none' => '', 'show_option_no_change' => '',
					'option_none_value' => ''
				),
				$attr
			);
			$attr['echo'] = false;
			return wp_dropdown_pages( $attr );
		break;
		
		/* List Pages */
		case 'list-pages':
			$attr = shortcode_atts(
				array(
					'depth' => 0, 'show_date' => '',
					'date_format' => get_option('date_format'),
					'child_of' => 0, 'exclude' => '',
					'title_li' => '',
					'authors' => '', 'sort_column' => 'menu_order, post_title',
					'link_before' => '', 'link_after' => '', 'walker' => '',
				),
				$attr
			);
			$attr['echo'] = false;
			return '<ul>'.wp_list_pages( $attr ).'</ul>';
		break;
		
	}
}